import com.badlogic.gdx.utils.JsonWriter
import org.reflections.Reflections
import com.badlogic.gdx.utils.JsonValue

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths

apply plugin: "kotlin"

sourceCompatibility = 1.7
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = ["src/"]
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
}

task configureReflection {
    dependsOn classes

    doLast {
        URL[] urls = sourceSets.main.runtimeClasspath.files.collect {
            it.toURI().toURL()
        }
        ClassLoader classLoader = new URLClassLoader(urls)

        Reflections reflections = new Reflections("com.company.todd", urls, classLoader)
        JsonValue json = new JsonValue(JsonValue.ValueType.object)

        JsonValue annotatedWithSerializationType = new JsonValue(JsonValue.ValueType.array)
        reflections.getTypesAnnotatedWith(classLoader.loadClass("com.company.todd.json.SerializationType"))
                .forEach {
                    annotatedWithSerializationType.addChild(new JsonValue(it.getName()))
                }
        json.addChild("annotatedWithSerializationType", annotatedWithSerializationType)

        java.nio.file.Path relativePath = Paths.get("META-INF", "my-reflections", "my-reflections.json")
        sourceSets.main.output.classesDirs.forEach({ file ->
            Writer writer = null
            try {
                java.nio.file.Path jsonPath = file.toPath().resolve(relativePath)
                Files.createDirectories(jsonPath.parent)
                writer = Files.newBufferedWriter(jsonPath, StandardCharsets.UTF_8)
                writer.write(json.toJson(JsonWriter.OutputType.json))
            } catch (IOException e) {
                throw new java.io.UncheckedIOException(e)
            } finally {
                if (writer != null) {
                    writer.close()
                }
            }
        })
    }
}

tasks.findByName("classes").finalizedBy(configureReflection)
